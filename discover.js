// discover.js (dev-5) — robust + enkel, ingen optional chaining i tildelinger
(function () {
    "use strict";

    // -------------------- utils --------------------
    function $(s, r) { return (r || document).querySelector(s); }
    function $all(s, r) { return Array.from((r || document).querySelectorAll(s)); }
    function esc(s) {
        s = String(s || "");
        return s.replace(/[&<>"]/g, function (c) { return ({ "&": "&amp;", "<": "&lt;", ">": "&gt;" })[c]; });
    }
    function cap(s) { return String(s || "").replace(/\b\w/g, function (m) { return m.toUpperCase(); }); }
    function uniq(arr) { return Array.from(new Set(arr || [])); }
    function take(arr, n) { return Array.isArray(arr) ? arr.slice(0, n) : []; }
    function sleep(ms) { return new Promise(function (r) { setTimeout(r, ms); }); }
    function randomId() { return Math.random().toString(36).slice(2, 10) + Math.random().toString(36).slice(2, 10); }
    function fmtInt(n) { n = Number(n || 0); return n >= 1000 ? (n / 1000).toFixed(n % 1000 === 0 ? 0 : 1) + "k" : String(n); }
    var nowYear = (new Date()).getFullYear();

    // -------------------- state --------------------
    var ALL_SUBJECTS = [
        "action", "adventure", "african literature", "american literature", "animals", "anthologies", "art",
        "autobiography", "banned books", "biology", "book club", "booktok", "business", "classics",
        "cozy mystery", "cozy fantasy", "contemporary", "crime", "dark academia", "dark romance", "dystopia",
        "economics", "epic fantasy", "essays", "fairy tales", "fantasy", "feminism", "folklore", "food",
        "graphic novels", "health", "historical fiction", "history", "horror", "humor", "inspirational",
        "lgbt", "literary fiction", "manga", "memoir", "mystery", "mythology", "new adult", "nonfiction",
        "norwegian", "philosophy", "poetry", "psychology", "religion", "retellings", "romance", "romantasy",
        "science", "science fiction", "self help", "short stories", "spirituality", "sports", "thriller", "smut",
        "time travel", "true crime", "urban fantasy", "war", "western", "women", "ya", "young adult", "zombies"
    ].sort(function (a, b) { return a.localeCompare(b); });

    var LIB_CACHE = null;

    // --- Lazy loading state ---
    var railOrder = [];
    var nextRailIndex = 0;
    var railsLoading = false;
    var railObserver = null;
    var currentDiscoverMode = 'ebooks'; // 'ebooks' or 'audiobooks'

    // -------------------- firebase helpers --------------------
    function hasFB() { return !!(window.fb && window.fb.db && window.fb.auth); }

    async function myLibraryMap(user) {
        var out = { work: new Set(), title: new Set(), subjects: [], authors: new Set(), authorCounts: new Map() };
        if (!hasFB() || !user) return out;
        try {
            var col = window.fb.db.collection("users").doc(user.uid).collection("books");
            var snap = await col.limit(500).get();
            snap.forEach(function (d) {
                var x = d.data() || {};
                if (x.author) {
                    var authorName = String(x.author);
                    out.authors.add(authorName);
                    out.authorCounts.set(authorName, (out.authorCounts.get(authorName) || 0) + 1);
                }
                if (x.workKey) out.work.add(String(x.workKey).toLowerCase());
                if (x.title) out.title.add(String(x.title).toLowerCase());
                if (Array.isArray(x.subjects)) {
                    (x.subjects || []).forEach(function (s) { out.subjects.push(String(s).toLowerCase()); });
                }
            });
        } catch (e) { console.warn("[discover] library map failed:", e); }
        return out;
    }

    async function getFriendsUids(user) {
        if (!user) return [];
        var out = new Set();
        try {
            var snap = await window.fb.db.collection("users").doc(user.uid).collection("friends").where("status", "==", "accepted").get();
            snap.forEach(function (d) { out.add(d.id); });
        } catch (e) { console.warn("[discover] friends uids failed:", e); }
        return Array.from(out);
    }

    async function addToLibrary(normal) {
        var user = hasFB() && window.fb.auth ? window.fb.auth.currentUser : null;
        if (!user) throw new Error("Not signed in");

        // The payload for a NEW book from discover.
        // The ID should be generated by the sync service, not set here.
        var payload = {
            title: normal.title || "Untitled",
            author: normal.author || "",
            coverUrl: normal.cover || "",
            status: "tbr",
            statuses: ["tbr"],
            rating: 0,
            workKey: normal.workKey || null,
            subjects: take(normal.subjects || [], 6)
        };

        if (!window.PBSync || !window.PBActivity) throw new Error("Core library features are not available.");

        // Save the book using the sync service for consistency and optimistic UI updates.
        const savedBook = await window.PBSync.saveBook(payload);
        // Log the activity so friends can see it.
        await window.PBActivity.handleBookUpdate(savedBook.id, savedBook, null);
        // Update the local session cache for the Discover page UI
        try {
            if (LIB_CACHE && LIB_CACHE.title) LIB_CACHE.title.add(String(payload.title).toLowerCase());
            if (LIB_CACHE && LIB_CACHE.work && payload.workKey) LIB_CACHE.work.add(String(payload.workKey).toLowerCase());
        } catch { }
        return savedBook.id;
    }

    // -------------------- data adapters (OL + GB) --------------------
    var hasOL = !!(window.PageBud && window.PageBud.apis && window.PageBud.apis.OL && window.PageBud.apis.OL.search && window.PageBud.apis.OL.normalize);
    var hasGB = !!(window.PageBud && window.PageBud.apis && window.PageBud.apis.GBOOKS && window.PageBud.apis.GBOOKS.search);

    function olCoverFrom(doc) {
        var id = doc.cover_i || doc.cover_id || doc.cover_edition_key;
        if (!id) return "";
        if (doc.cover_i || doc.cover_id) return "https://covers.openlibrary.org/b/id/" + id + "-M.jpg";
        return "https://covers.openlibrary.org/b/olid/" + id + "-M.jpg";
    }
    function olNormalizeSearchDoc(doc) {
        var wk = doc.key || (Array.isArray(doc.work_key) ? doc.work_key[0] : doc.work_key) || null;
        var auth = Array.isArray(doc.author_name) ? doc.author_name[0]
            : (doc.author_name || (Array.isArray(doc.authors) ? (doc.authors[0] && doc.authors[0].name) : doc.author) || "Unknown");
        var year = doc.first_publish_year || doc.first_publish_date || (Array.isArray(doc.publish_year) ? doc.publish_year[0] : "") || "";
        var subs = Array.isArray(doc.subject) ? doc.subject.slice(0, 8) : (doc.subject ? [doc.subject] : []);
        return { id: String(wk || doc.key || ""), workKey: wk, title: doc.title || "Untitled", author: auth, year: year, cover: olCoverFrom(doc), subjects: subs };
    }
    async function olJSON(url) {
        var r = await fetch(url);
        if (!r.ok) throw new Error("fetch fail: " + url);
        return r.json();
    }
    async function olSearchFallback(q, page, limit) {
        page = page || 1; limit = limit || 20;
        var u = new URL("https://openlibrary.org/search.json");
        u.searchParams.set("q", q || "");
        u.searchParams.set("page", String(page));
        u.searchParams.set("limit", String(limit));
        var data = await olJSON(u.toString());
        var docs = Array.isArray(data.docs) ? data.docs : [];
        return docs.map(olNormalizeSearchDoc);
    }
    async function olWorkExtrasFallback(workKey) {
        if (!workKey) return {};
        try {
            var meta = await olJSON("https://openlibrary.org" + workKey + ".json");
            var description = "";
            if (typeof meta.description === "string") description = meta.description;
            else if (meta.description && meta.description.value) description = meta.description.value;
            var subjects = Array.isArray(meta.subjects) ? meta.subjects.slice(0, 12) : [];
            return { description: description, subjects: subjects };
        } catch { return {}; }
    }
    async function safeOLSearch(query, page, limit) {
        page = page || 1; limit = limit || 20;
        if (hasOL) {
            try {
                var r = await window.PageBud.apis.OL.search(query, page, limit);
                var docs = r && r.docs ? r.docs : [];
                return docs.map(window.PageBud.apis.OL.normalize);
            } catch (e) { console.warn("[discover] OL adapter failed, fallback:", e); }
        }
        return olSearchFallback(query, page, limit);
    }
    async function safeGBSearch(query, limit) {
        limit = limit || 20;
        if (!hasGB) return [];
        try { return await window.PageBud.apis.GBOOKS.search(query, limit); }
        catch (e) { console.warn("[discover] GB adapter failed:", e); return []; }
    }
    async function safeWorkExtras(workKey) {
        if (hasOL && window.PageBud.apis.OL.workExtras) {
            try { return await window.PageBud.apis.OL.workExtras(workKey); }
            catch (e) { console.warn("[discover] workExtras adapter failed:", e); }
        }
        return olWorkExtrasFallback(workKey);
    }
    async function fetchCombinedSearchResults(query, olLimit, gbooksLimit) {
        olLimit = olLimit || 20; gbooksLimit = gbooksLimit || 20;
        if (currentDiscoverMode === 'audiobooks') {
            query = query ? `${query} subject:"audiobooks"` : 'subject:"audiobooks"';
        }
        var olBooks = await safeOLSearch(query, 1, olLimit);
        var gbBooks = await safeGBSearch(query, gbooksLimit);
        var combined = [], seen = new Set();
        function key(b) { return (String(b.title || "").toLowerCase().trim() + "::" + String(b.author || "").toLowerCase().trim()); }
        [].concat(gbBooks || [], olBooks || []).forEach(function (b) {
            var k = key(b);
            if (b.title && !seen.has(k)) { combined.push(b); seen.add(k); }
        });
        return combined;
    }

    // -------------------- UI bits --------------------
    function ensureDrawer() {
        var drawer = $("#discDrawer");
        if (drawer) return drawer;
        drawer = document.createElement("div");
        drawer.id = "discDrawer";
        drawer.className = "disc-drawer";
        drawer.innerHTML =
            '<div class="disc-drawer__scrim" data-close></div>' +
            '<aside class="disc-drawer__panel">' +
            '  <div class="disc-drawer__head">' +
            '    <b>Genres</b>' +
            '    <button class="btn btn-secondary small" data-close>Close</button>' +
            '  </div>' +
            '  <div class="disc-drawer__search row" style="margin:8px 0 12px">' +
            '    <input class="form-control" id="drawerFilter" placeholder="Filter genres…"/>' +
            '  </div>' +
            '  <div class="disc-drawer__list" id="drawerList"></div>' +
            '</aside>';
        document.body.appendChild(drawer);

        var list = $("#drawerList", drawer);
        list.innerHTML = ALL_SUBJECTS.map(function (sub) {
            return '<div class="side-link" data-sub="' + esc(sub) + '">' + esc(cap(sub)) + '</div>';
        }).join("");

        var filter = $("#drawerFilter", drawer);
        if (filter) {
            filter.addEventListener("input", function (e) {
                var q = String(e.target.value || "").toLowerCase().trim();
                $all(".side-link", list).forEach(function (el) {
                    var hit = el.textContent.toLowerCase().includes(q);
                    el.style.display = hit ? "" : "none";
                });
            });
        }

        list.addEventListener("click", function (e) {
            var link = e.target.closest(".side-link");
            if (!link) return;
            drawer.classList.remove("show");
            showSeeAllPage('subject:"' + link.getAttribute("data-sub") + '"', cap(link.getAttribute("data-sub")));
        });

        drawer.addEventListener("click", function (e) {
            if (e.target.hasAttribute("data-close")) drawer.classList.remove("show");
        });

        return drawer;
    }

    function ensureSheet() {
        var el = $("#bookSheet");
        if (el) return el;
        el = document.createElement("div");
        el.id = "bookSheet";
        el.className = "sheet";
        el.innerHTML =
            '<div class="sheet__scrim" data-close></div>' +
            '<div class="sheet__panel"><div id="sheetBody">Loading…</div></div>';
        document.body.appendChild(el);
        el.addEventListener("click", function (e) {
            if (e.target.hasAttribute("data-close")) el.classList.remove("show");
        });
        return el;
    }

    function renderSheetHTML(basic, extras, inLib) {
        var subs = uniq([].concat(basic.subjects || [], extras.subjects || [])).slice(0, 8);
        var desc = String(extras.description || "").trim();
        var ratingLine = (typeof extras.avg !== "undefined" && extras.avg !== null)
            ? '<div class="muted-small">★ ' + Number(extras.avg).toFixed(1) + ' (' + fmtInt(extras.count) + ' ratings)</div>'
            : '';

        return (
            '<div class="card" style="margin:0">' +
            ' <div class="row">' +
            '   <img src="' + esc(basic.cover || "") + '" alt="" style="width:110px;height:150px;object-fit:cover;border-radius:10px;border:1px solid var(--border);background:#eee" onerror="this.src=\'\';this.style.background=\'#eee\'" draggable="false"/>' +
            '   <div class="row-grow">' +
            '     <h2 style="margin:0 0 4px 0">' + esc(basic.title) + '</h2>' +
            '     <div class="muted">' + esc(basic.author) + (basic.year ? " · " + esc(basic.year) : "") + '</div>' +
            '     <div class="row" style="margin:8px 0 0">' + ratingLine + '</div>' +
            '   </div>' +
            ' </div>' +
            (subs.length ? ('<div class="chips" style="margin:12px 0 6px">' + subs.map(function (g) {
                return '<span class="chip muted-small" data-subj="' + esc(g) + '">' + esc(cap(g)) + '</span>';
            }).join("") + '</div>') : '') +
            (desc
                ? ('<div class="muted" id="sheetDesc" style="margin-top:8px; max-height: 10.5em; overflow: hidden;">' + esc(desc) + '</div>' +
                    '<div class="row" style="justify-content:flex-end;margin-top:6px"><button class="btn btn-secondary small" id="descToggle">Show more</button></div>')
                : '<div class="muted-small" style="margin-top:8px">No description available.</div>') +
            ' <div class="row" style="justify-content:flex-end;margin-top:12px">' +
            (inLib ? '<span class="muted-small" aria-label="In library">Already in your library ✓</span>' : '<button class="btn btn-secondary" id="sheetAdd">+ Add to Library</button>') +
            '   <button class="btn" data-close>Close</button>' +
            ' </div>' +
            '</div>'
        );
    }

    async function openBookSheet(basic) {
        var sheet = ensureSheet();
        var body = $("#sheetBody", sheet);
        body.innerHTML = '<div class="muted">Loading details…</div>';
        sheet.classList.add("show");

        var extras = {};
        try { extras = await safeWorkExtras(basic.workKey); } catch { }
        var inLib = markInLib(basic, LIB_CACHE);
        body.innerHTML = renderSheetHTML(basic, extras, inLib);

        body.onclick = async function (e) {
            var t = e.target;
            if (t.id === "sheetAdd") {
                t.disabled = true;
                try {
                    await addToLibrary(basic);
                    var frag = document.createRange().createContextualFragment('<span class="muted-small">Already in your library ✓</span>');
                    t.replaceWith(frag);
                    toast("Added to your library ✓");
                } catch { t.disabled = false; alert("Could not add this book."); }
            }
            if (t.id === "descToggle") {
                var d = $("#sheetDesc", body);
                var expanded = d && d.dataset && d.dataset.x === "1";
                if (d) { d.style.maxHeight = expanded ? "10.5em" : "100vh"; if (!d.dataset) d.dataset = {}; d.dataset.x = expanded ? "0" : "1"; }
                t.textContent = expanded ? "Show more" : "Show less";
            }
            var chip = t.closest && t.closest("[data-subj]");
            if (chip) {
                sheet.classList.remove("show");
                showSeeAllPage('subject:"' + chip.getAttribute("data-subj") + '"', cap(chip.getAttribute("data-subj")));
            }
        };
    }

    // -------------------- lazy loading rails --------------------
    async function loadNextBatchOfRails(batchSize) {
        batchSize = batchSize || 3;
        if (railsLoading || nextRailIndex >= railOrder.length) return;
        railsLoading = true;

        var host = railsHost();
        var sentinel = $("#railSentinel", host);
        if (sentinel) sentinel.innerHTML = '<div class="loading-spinner"></div>';

        var batchIds = railOrder.slice(nextRailIndex, nextRailIndex + batchSize);
        nextRailIndex += batchSize;

        for (var i = 0; i < batchIds.length; i++) {
            var id = batchIds[i];
            var def = window.PB_RAILS[id];
            if (def) {
                try {
                    await buildCuratedRail(id, def.title, def.query, LIB_CACHE, { tags: def.tags });
                } catch (e) {
                    console.warn("rail build failed", id, e);
                }
                await sleep(100); // Stagger API calls slightly
            }
        }

        if (sentinel) sentinel.innerHTML = '';

        if (nextRailIndex >= railOrder.length) {
            if (railObserver && sentinel) railObserver.unobserve(sentinel);
            if (sentinel) sentinel.remove();
        }
        railsLoading = false;
    }

    function getEnhancedQuery(railId, originalQuery) {
        const now = new Date().getFullYear();
        // A tighter recency filter for most modern collections
        const recentYearFilter = `first_publish_year:[${now - 5} TO ${now}]`;

        const enhancements = {
            'dark_romance': {
                authors: ['"H.D. Carlton"', '"Penelope Douglas"', '"Ana Huang"', '"Rina Kent"', '"Danielle Lori"'],
                keywords: ['mafia', 'stalker', 'bully romance', '"morally grey"'],
                exclusions: ['-author:"Agatha Christie"', '-author:"Jane Austen"', '-subject:classic', '-subject:"historical romance"'],
                strict: true // New flag to ignore originalQuery
            },
            'romantasy': {
                authors: ['"Sarah J. Maas"', '"Rebecca Yarros"', '"Jennifer L. Armentrout"', '"Carissa Broadbent"'],
                keywords: ['fae', 'dragon', '"fantasy romance"'],
                exclusions: [],
                strict: true
            },
            'psych_thrillers': {
                authors: ['"Gillian Flynn"', '"Paula Hawkins"', '"Alex Michaelides"', '"Shari Lapena"', '"Freida McFadden"'],
                keywords: ['"unreliable narrator"', '"domestic thriller"', 'psychological'],
                exclusions: [],
                strict: false // Keep original query for broader results
            },
            'best_horror': {
                authors: ['"Stephen King"', '"Shirley Jackson"', '"T. Kingfisher"', '"Grady Hendrix"', '"Silvia Moreno-Garcia"'],
                keywords: ['horror', 'supernatural', 'gothic'],
                exclusions: [],
                strict: false
            }
        };

        const enhancement = enhancements[railId];
        if (enhancement) {
            const authorQuery = enhancement.authors.map(a => `author:${a}`).join(' OR ');
            const keywordQuery = enhancement.keywords.map(k => `subject:${k}`).join(' OR ');
            const exclusionQuery = enhancement.exclusions.join(' ');
            let finalQuery = `((${authorQuery}) OR (${keywordQuery}))`;
            if (!enhancement.strict) {
                finalQuery = `${finalQuery} OR (${originalQuery})`;
            }
            return `${finalQuery} AND ${recentYearFilter} ${exclusionQuery}`;
        }
        const generalRecencyFilter = `first_publish_year:[${now - 10} TO ${now}]`;
        return `${originalQuery} AND ${generalRecencyFilter}`;
    }

    // -------------------- rendering helpers --------------------
    function railSkeleton(n) {
        n = n || 6;
        return '<div class="rail-list">' + Array.from({ length: n }).map(function () {
            return (
                '<div class="tile is-skel">' +
                '  <div class="cover"></div>' +
                '  <div class="skel-line"></div>' +
                '  <div class="skel-line"></div>' +
                '</div>'
            );
        }).join("") + '</div>';
    }
    function railsHost() { return $("#railsHost"); }

    function makeSection(id, title, tags) {
        tags = tags || [];
        var host = railsHost();
        var sec = document.createElement("section");
        sec.className = "card";
        sec.setAttribute("data-rail", id);
        sec.innerHTML =
            '<div class="card-head">' +
            '  <div style="display:flex;align-items:center;gap:12px;flex-wrap:wrap">' +
            '    <h3 style="margin:0">' + esc(title) + '</h3>' +
            '    <a class="btn btn-secondary small" data-seeall>See all</a>' +
            '    <div class="chips muted-small" data-tags>' + tags.map(function (t) { return '<span class="chip muted-small">' + esc(t) + '</span>'; }).join("") + '</div>' +
            '  </div>' +
            '</div>' +
            '<div class="rail-list"></div>'; // Start empty, will be populated on demand
        host.appendChild(sec);
        var see = sec.querySelector("[data-seeall]");
        if (see) see.addEventListener("click", function () { openSeeAllFor(id); });
        return sec;
    }

    function tileHTML(b, inLib) {
        // Simplified card as requested: cover, title, author, year, add button.
        const yearHTML = b.year ? `<div class="meta">${esc(String(b.year))}</div>` : '';
        var actionHTML = inLib ? '<span class="muted-small" aria-label="In library">Already in ✓</span>'
            : '<button class="btn small" data-add=\'' + encodeURIComponent(JSON.stringify(b)) + '\'>+ Add</button>';

        return (
            '<div class="tile" data-book=\'' + encodeURIComponent(JSON.stringify(b)) + '\'>' +
            '  <img class="cover" src="' + esc(b.cover || "") + '" alt="" onerror="this.src=\'\';this.style.background=\'#eee\'" draggable="false"/>' +
            '  <div class="t">' + esc(b.title || "") + '</div>' +
            '  <div class="a">' + esc(b.author || "") + '</div>' +
            yearHTML +
            '  <div class="actions">' + actionHTML + '</div>' +
            '</div>'
        );
    }

    function toast(msg) {
        msg = msg || "Done";
        var el = $("#pb-toast");
        if (!el) { el = document.createElement("div"); el.id = "pb-toast"; el.className = "toast"; document.body.appendChild(el); }
        el.textContent = msg; el.classList.add("show"); setTimeout(function () { el.classList.remove("show"); }, 1600);
    }

    function enhanceRailScroll(root) {
        if (!root || root.__pbEnhanced) return;
        root.__pbEnhanced = true;
        root.addEventListener("wheel", function (e) {
            if (root.scrollWidth > root.clientWidth && !e.shiftKey) { root.scrollLeft += (e.deltaY || 0) + (e.deltaX || 0); e.preventDefault(); }
        }, { passive: false });
        var down = false, startX = 0, startLeft = 0, dragged = false;
        root.addEventListener("pointerdown", function (e) { if (e.button !== 0) return; down = true; dragged = false; startX = e.clientX; startLeft = root.scrollLeft; root.classList.add("dragging"); });
        root.addEventListener("pointermove", function (e) { if (!down) return; var dx = e.clientX - startX; if (Math.abs(dx) > 4) dragged = true; root.scrollLeft = startLeft - dx; });
        function end() {
            if (!down) return; down = false;
            if (dragged) {
                var kill = function (ev) { ev.stopPropagation(); ev.preventDefault(); root.removeEventListener("click", kill, true); };
                root.addEventListener("click", kill, true);
            }
            root.classList.remove("dragging");
        }
        root.addEventListener("pointerup", end);
        root.addEventListener("pointercancel", end);
    }

    function markInLib(b, map) {
        if (!map) return false;
        if (b.workKey && map.work.has(String(b.workKey).toLowerCase())) return true;
        if (b.title && map.title.has(String(b.title).toLowerCase())) return true;
        return false;
    }

    function bindSectionClicks(sec) {
        sec.addEventListener("click", async function (e) {
            var add = e.target.closest ? e.target.closest("[data-add]") : null;
            if (add) {
                add.disabled = true;
                add.innerHTML = '<i class="fa-solid fa-spinner fa-spin"></i> Adding...';
                try {
                    var book = JSON.parse(decodeURIComponent(add.getAttribute("data-add")));
                    await addToLibrary(book);
                    var wrap = add.closest(".actions");
                    if (wrap) wrap.innerHTML = '<span class="muted-small">Already in ✓</span>';
                    toast("Added to your library ✓");
                } catch (err) {
                    console.warn(err); add.disabled = false; add.innerHTML = '+ Add'; alert("Could not add this book.");
                }
                return;
            }
            var tile = e.target.closest ? e.target.closest(".tile") : null;
            if (!tile || (e.target.closest && e.target.closest(".chip,[data-add]"))) return;
            try {
                var book2 = JSON.parse(decodeURIComponent(tile.getAttribute("data-book")));
                openBookSheet(book2);
            } catch { }
        });
    }

    // -------------------- rails --------------------
    async function buildCuratedRail(id, title, query, libMap, opts) {
        opts = opts || {}; var tags = opts.tags || [];
        var sec = makeSection(id, title, tags);
        bindSectionClicks(sec);
        try {
            var rail = sec.querySelector(".rail-list"); if (rail) rail.innerHTML = railSkeleton(6);
            var enhancedQuery = getEnhancedQuery(id, query);
            var items = await fetchCombinedSearchResults(enhancedQuery, 20, 20);
            var rail = sec.querySelector(".rail-list"); if (!rail) return;
            var displayItems = libMap ? items.filter(function (b) { return !markInLib(b, libMap); }) : items;
            if (!displayItems.length) {
                rail.innerHTML = (libMap && libMap.work.size > 0 && items.length > 0)
                    ? '<div class="muted">No new recommendations for you in this category.</div>'
                    : '<div class="muted">No books found for this collection.</div>';
                return;
            }
            rail.innerHTML = displayItems.slice(0, 24).map(function (b) { return tileHTML(b, markInLib(b, libMap)); }).join("");
            enhanceRailScroll(rail);
        } catch (e) {
            console.warn("rail failed:", id, e);
            var r = sec.querySelector(".rail-list"); if (r) r.innerHTML = '<div class="muted">Could not load “' + esc(title) + '”.</div>';
        }
    }

    async function buildBecauseYouRead(libMap) {
        var sec = makeSection("because", "Because you read …", []);
        bindSectionClicks(sec);
        var counts = {};
        (libMap.subjects || []).forEach(function (s) { var k = String(s || "").toLowerCase(); if (!k) return; counts[k] = (counts[k] || 0) + 1; });
        var top = Object.keys(counts).map(function (k) { return [k, counts[k]]; }).sort(function (a, b) { return b[1] - a[1]; }).slice(0, 3).map(function (x) { return x[0]; });
        var rail = sec.querySelector(".rail-list");
        if (!top.length || !rail) { rail.innerHTML = '<div class="muted">Add books with genres to get recommendations.</div>'; return; }
        var tagsHost = sec.querySelector("[data-tags]");
        if (tagsHost) tagsHost.innerHTML = top.map(function (t) { return '<span class="chip muted-small">' + esc(cap(t)) + '</span>'; }).join("");
        var query = top.map(function (s) { return 'subject:"' + s + '"'; }).join(" OR ");
        var items = await fetchCombinedSearchResults(query, 15, 15);
        var filtered = items.filter(function (b) { return !markInLib(b, libMap); });
        rail.innerHTML = filtered.length ? filtered.slice(0, 20).map(function (b) { return tileHTML(b, false); }).join("") : '<div class="muted">No new recommendations for you in this category.</div>';
        enhanceRailScroll(rail);
    }

    async function buildFavoriteAuthorsRail(libMap) {
        if (!libMap || !libMap.authorCounts || libMap.authorCounts.size === 0) return;

        var sec = makeSection("fave_authors", "New from Your Favorite Authors", ["Personalized"]);
        bindSectionClicks(sec);
        var rail = sec.querySelector(".rail-list");
        if (!rail) return;
        rail.innerHTML = railSkeleton(6);

        var topAuthors = Array.from(libMap.authorCounts.entries())
            .sort(function (a, b) { return b[1] - a[1]; })
            .slice(0, 3)
            .map(function (entry) { return entry[0]; });

        if (topAuthors.length === 0) {
            rail.innerHTML = '<div class="muted">Add books to your library to get recommendations from your favorite authors.</div>';
            return;
        }

        var query = topAuthors.map(function (author) { return `author:"${author}"`; }).join(" OR ");
        var items = await fetchCombinedSearchResults(query, 15, 15);
        var filtered = items.filter(function (b) { return !markInLib(b, libMap); }).sort(function (a, b) { return (Number(b.year) || 0) - (Number(a.year) || 0); });
        rail.innerHTML = filtered.length ? filtered.slice(0, 20).map(function (b) { return tileHTML(b, false); }).join("") : '<div class="muted">No new releases found from your favorite authors.</div>';
        enhanceRailScroll(rail);
    }

    async function buildRecentlyAddedRail(libMap) {
        var sec = makeSection("recently_added", "Recently Added to PageBud", ["Community"]);
        bindSectionClicks(sec);
        var rail = sec.querySelector(".rail-list");
        if (!rail) return;
        rail.innerHTML = railSkeleton(6);

        try {
            var query = window.fb.db.collectionGroup('public_activity')
                .where('action', '==', 'book_saved')
                .orderBy('createdAt', 'desc')
                .limit(50); // Fetch a larger pool to filter and dedupe

            var snap = await query.get();
            if (snap.empty) {
                rail.innerHTML = '<div class="muted">No recent additions from the community.</div>';
                return;
            }

            var seen = new Set();
            var items = [];
            snap.forEach(function (doc) {
                var activity = doc.data();
                var meta = activity.meta || {};
                var key = meta.workKey || (meta.title || "").toLowerCase();

                if (!key || seen.has(key) || markInLib(meta, libMap)) return;
                seen.add(key);

                items.push({ id: activity.targetId, title: meta.title, author: meta.author, cover: meta.coverUrl, workKey: meta.workKey, subjects: meta.subjects || [] });
            });

            rail.innerHTML = items.slice(0, 20).map(function (b) { return tileHTML(b, false); }).join("");
            enhanceRailScroll(rail);

        } catch (e) {
            console.warn("Recently Added rail failed:", e);
            if (e.code === 'failed-precondition') {
                rail.innerHTML = '<div class="muted" style="font-size: .85rem; padding: 0 8px;">This feature requires a database index. Please check the browser console for a link to create it.</div>';
            } else {
                rail.innerHTML = '<div class="muted">Could not load recently added books.</div>';
            }
        }
    }

    async function buildTrendingAmongFriends(libMap, user) {
        var sec = makeSection("trending_friends", "Trending Among Friends", []);
        bindSectionClicks(sec);
        var friendUids = await getFriendsUids(user);
        var rail = sec.querySelector(".rail-list");
        if (!rail) return;
        if (!friendUids.length) {
            rail.innerHTML = '<div class="muted">Add some friends to see what they\'re reading!</div>';
            return;
        }
        rail.innerHTML = railSkeleton(6);

        var bookCounts = new Map(),
            bookData = new Map();

        // Fetch recent 'book_finished' activities from all friends
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

        var friendActivityPromises = friendUids.map(function (uid) {
            return window.fb.db.collection("users").doc(uid).collection("public_activity")
                .where('action', '==', 'book_finished')
                .where('createdAt', '>=', thirtyDaysAgo)
                .orderBy('createdAt', 'desc')
                .limit(10) // Limit per friend to keep it manageable
                .get();
        });

        try {
            var friendActivities = await Promise.all(friendActivityPromises);

            friendActivities.forEach(function (snap) {
                snap.forEach(function (doc) {
                    var activity = doc.data();
                    var meta = activity.meta || {};
                    var key = String(meta.workKey || meta.title || "").toLowerCase();

                    if (!key || libMap.work.has(key) || libMap.title.has(String(meta.title || "").toLowerCase())) return;

                    bookCounts.set(key, (bookCounts.get(key) || 0) + 1);
                    if (!bookData.has(key)) {
                        bookData.set(key, { id: activity.targetId, title: meta.title, author: meta.author, cover: meta.coverUrl, workKey: meta.workKey, subjects: meta.subjects || [] });
                    }
                });
            });

            var sorted = Array.from(bookCounts.entries()).sort(function (a, b) { return b[1] - a[1]; }).slice(0, 20);
            var items = sorted.map(function (entry) { return bookData.get(entry[0]); }).filter(Boolean);

            if (currentDiscoverMode === 'audiobooks') {
                items = items.filter(function (b) { return b.subjects && b.subjects.some(function (s) { return String(s).toLowerCase().includes('audiobook'); }); });
            }

            rail.innerHTML = items.length ? items.map(function (b) { return tileHTML(b, false); }).join("") : '<div class="muted">No trending books among your friends right now.</div>';
            enhanceRailScroll(rail);
        } catch (e) {
            console.warn("Trending Among Friends rail failed:", e);
            if (e.code === 'failed-precondition') {
                rail.innerHTML = '<div class="muted" style="font-size: .85rem; padding: 0 8px;">This feature requires a database index. Check the browser console for a link to create it.</div>';
            } else {
                rail.innerHTML = '<div class="muted">Could not load trending books.</div>';
            }
        }
    }

    // -------------------- search & see all --------------------
    function renderBookList(books, containerEl, title) {
        title = title || "Results";
        if (!containerEl) return;
        var listHTML = books.map(function (b) {
            var chips = (b.subjects || []).slice(0, 4).map(function (g) { return '<span class="chip muted-small">' + esc(cap(g)) + '</span>'; }).join(" ");
            var inLibrary = markInLib(b, LIB_CACHE);
            var action = inLibrary ? '<span class="muted-small">Already in ✓</span>' : '<button class="btn btn-secondary small" data-add=\'' + encodeURIComponent(JSON.stringify(b)) + '\'>+ Add</button>';
            return (
                '<div class="list-tile" data-book=\'' + encodeURIComponent(JSON.stringify(b)) + '\'>' +
                '  <img class="cover" src="' + esc(b.cover || "") + '" alt="" onerror="this.src=\'\';this.style.background=\'#eee\'" draggable="false"/>' +
                '  <div><div class="t">' + esc(b.title) + '</div><div class="a">' + esc(b.author) + (b.year ? " · " + esc(b.year) : "") + '</div>' + chips + '</div>' +
                '  <div class="row" style="justify-content:flex-end">' + action + '</div>' +
                '</div>'
            );
        }).join("");

        containerEl.innerHTML = '<div class="card"><div class="card-head"><h3 style="margin:0">' + esc(title) + '</h3></div><div class="list">' + listHTML + '</div></div>';

        containerEl.onclick = async function (e) {
            var add = e.target.closest ? e.target.closest("[data-add]") : null;
            if (add) {
                add.disabled = true;
                try {
                    var book = JSON.parse(decodeURIComponent(add.getAttribute("data-add")));
                    await addToLibrary(book);
                    add.parentElement.innerHTML = '<span class="muted-small">Already in ✓</span>';
                    toast("Added to your library ✓");
                } catch { add.disabled = false; alert("Could not add this book."); }
                return;
            }
            var tile = e.target.closest ? e.target.closest(".list-tile") : null;
            if (tile && !(e.target.closest && e.target.closest(".chip"))) {
                try { openBookSheet(JSON.parse(decodeURIComponent(tile.getAttribute("data-book")))); } catch { }
            }
        };
        containerEl.scrollIntoView({ behavior: "smooth", block: "start" });
    }

    async function doSearch() {
        var qEl = $("#q"), host = $("#results"), railsHostEl = $("#railsHost");
        if (!host) return;
        var q = qEl ? String(qEl.value || "").trim() : "";
        if (railsHostEl) railsHostEl.style.display = q ? "none" : "block";
        if (!q) { host.innerHTML = ""; return; }
        host.innerHTML = '<div class="muted" style="padding:10px">Searching…</div>';
        try {
            var combined = await fetchCombinedSearchResults(q, 20, 20);
            if (!combined.length) { host.innerHTML = '<div class="muted" style="padding:10px">No results found for "' + esc(q) + '".</div>'; return; }
            renderBookList(combined, host, 'Search results for "' + q + '"');
        } catch (e) {
            console.warn(e);
            host.innerHTML = '<div class="muted" style="padding:10px">Search failed.</div>';
        }
    }

    async function showSeeAllPage(query, title) {
        var host = $("#results");
        if (!host) return;
        host.innerHTML = '<div class="muted" style="padding:10px">Loading “' + esc(title) + '”...</div>';
        try {
            var items = await fetchCombinedSearchResults(query, 40, 40);
            renderBookList(items, host, title);
        } catch (e) {
            console.warn(e);
            host.innerHTML = '<div class="muted" style="padding:10px">Could not load “' + esc(title) + '”.</div>';
        }
    }

    function openSeeAllFor(railId) {
        if (railId === "trending_friends") { $("#results").innerHTML = '<div class="muted" style="padding:10px">This collection doesn\'t have a "See All" page.</div>'; return; }
        if (railId === "because") {
            var counts = {};
            (LIB_CACHE && LIB_CACHE.subjects ? LIB_CACHE.subjects : []).forEach(function (s) {
                var k = String(s || "").toLowerCase(); if (!k) return; counts[k] = (counts[k] || 0) + 1;
            });
            var top = Object.keys(counts).map(function (k) { return [k, counts[k]]; }).sort(function (a, b) { return b[1] - a[1]; }).slice(0, 5).map(function (x) { return x[0]; });
            var query = top.length ? top.map(function (s) { return 'subject:"' + s + '"'; }).join(" OR ") : "subject:fiction";
            showSeeAllPage(query, "Because You Read...");
            return;
        }
        if (railId === "fave_authors") {
            if (!LIB_CACHE || !LIB_CACHE.authorCounts || LIB_CACHE.authorCounts.size === 0) {
                $("#results").innerHTML = '<div class="muted">Add books to your library to see this.</div>'; return;
            }
            var topAuthors = Array.from(LIB_CACHE.authorCounts.entries())
                .sort(function (a, b) { return b[1] - a[1]; })
                .slice(0, 5)
                .map(function (entry) { return entry[0]; });

            if (!topAuthors.length) { $("#results").innerHTML = '<div class="muted">Add books to your library to see this.</div>'; return; }
            var q = topAuthors.map(function (a) { return 'author:"' + a + '"'; }).join(" OR ");
            showSeeAllPage(q, "New from Your Favorite Authors");
            return;
        }
        var def = window.PB_RAILS && window.PB_RAILS[railId];
        if (def) showSeeAllPage(def.query, def.title);
        else console.warn('No "See All" def for rail:', railId);
    }

    // -------------------- expose (for inline onclick fallbacks) --------------------
    window.__pbDoSearch = function () { try { doSearch(); } catch (e) { console.error(e); } };
    window.__pbEnsureDrawer = function () { try { return ensureDrawer(); } catch (e) { console.error(e); return { classList: { add: function () { } } }; } };

    // -------------------- init --------------------
    function wireUI() {
        var menuBtn = $("#discMenuBtn");
        if (menuBtn) menuBtn.addEventListener("click", function () { ensureDrawer().classList.add("show"); });
        var qBtn = $("#qBtn");
        if (qBtn) qBtn.addEventListener("click", doSearch);
        var q = $("#q");
        if (q) q.addEventListener("keydown", function (e) { if (e.key === "Enter") doSearch(); });

        // --- Format Toggle (eBooks / Audiobooks) ---
        var formatToggleContainer = document.createElement('div');
        formatToggleContainer.className = 'discover-format-toggle';
        formatToggleContainer.innerHTML = `
            <button class="btn active" data-mode="ebooks">eBooks</button>
            <button class="btn" data-mode="audiobooks">Audiobooks</button>
        `;
        var searchContainer = $('.toolbar') || $('.header'); // Place it after the toolbar or header
        if (searchContainer) {
            searchContainer.after(formatToggleContainer);
        }

        formatToggleContainer.addEventListener('click', async function (e) {
            var btn = e.target.closest('button');
            if (!btn || btn.classList.contains('active')) return;

            currentDiscoverMode = btn.dataset.mode;

            $all('button', formatToggleContainer).forEach(function (b) { b.classList.remove('active'); });
            btn.classList.add('active');

            var user = hasFB() && window.fb.auth ? window.fb.auth.currentUser : null;
            await buildHomeRails(user);
        });

        // Delegation backup
        document.addEventListener("click", function (e) {
            var id = e.target && e.target.id;
            if (id === "qBtn") doSearch();
            if (id === "discMenuBtn") ensureDrawer().classList.add("show");
        });

        // --- Back to Top Button ---
        var backToTopBtn = $('#backToTopBtn');
        if (backToTopBtn) {
            window.addEventListener('scroll', function () {
                if (window.scrollY > 400) { // Show after scrolling down 400px
                    backToTopBtn.classList.add('show');
                } else {
                    backToTopBtn.classList.remove('show');
                }
            }, { passive: true });

            backToTopBtn.addEventListener('click', function () {
                window.scrollTo({ top: 0, behavior: 'smooth' });
            });
        }
    }

    async function buildHomeRails(user) {
        var host = railsHost();
        if (!host) { console.error("Discover: #railsHost missing"); return; }
        while (host.firstChild) host.removeChild(host.firstChild);
        var loadingEl = document.createElement("div");
        loadingEl.className = "card muted"; loadingEl.style.padding = "16px"; loadingEl.textContent = "Loading collections...";
        host.appendChild(loadingEl);

        LIB_CACHE = await myLibraryMap(user);
        if (host.contains(loadingEl)) host.removeChild(loadingEl);

        if (!window.PB_RAILS || !Object.keys(window.PB_RAILS).length) {
            // ... existing fallback logic ...
        }

        // --- Personalized Rails (load these first, not lazy-loaded) ---
        if (user) {
            const forYouHeader = document.createElement('h2');
            forYouHeader.className = 'discover-section-header';
            forYouHeader.textContent = 'For You';
            host.appendChild(forYouHeader);

            await buildBecauseYouRead(LIB_CACHE);
            await buildTrendingAmongFriends(LIB_CACHE, user);
            await buildFavoriteAuthorsRail(LIB_CACHE);
            await buildRecentlyAddedRail(LIB_CACHE);
        }

        // --- Curated Collections (these will be lazy-loaded) ---
        const curatedHeader = document.createElement('h2');
        curatedHeader.className = 'discover-section-header';
        curatedHeader.textContent = 'Curated Collections';
        host.appendChild(curatedHeader);

        // Dynamically add the Audiobooks rail to the list of collections
        if (window.PB_RAILS && !window.PB_RAILS.audiobooks) {
            window.PB_RAILS.audiobooks = { title: "Popular Audiobooks", tags: ["Listen"], query: 'subject:"audiobooks"' };
        }

        // Set up the global order of rails to be loaded
        railOrder = [
            "new_releases", "booktok", "epic_fantasy", "psych_thrillers", "romance_reads",
            "dark_romance", "banned_forbidden", "christmas_reads", "spooky_season", "self_help", "philosophical_reads",
            "audiobooks" // Add our new rail to the end of the list
        ].filter(function (id) { return window.PB_RAILS[id]; });

        if (!railOrder.length) {
            const noCollectionsEl = document.createElement('div');
            noCollectionsEl.className = 'card muted';
            noCollectionsEl.style.padding = '16px';
            noCollectionsEl.textContent = 'No curated collections available.';
            host.appendChild(noCollectionsEl);
            return;
        }

        // Reset state for lazy loading
        nextRailIndex = 0;
        railsLoading = false;

        // Add the sentinel for IntersectionObserver
        var sentinel = document.createElement('div');
        sentinel.id = 'railSentinel';
        sentinel.innerHTML = '<div class="loading-spinner"></div>';
        host.appendChild(sentinel);

        // Set up the observer
        if (railObserver) railObserver.disconnect();
        railObserver = new IntersectionObserver(function (entries) {
            if (entries[0].isIntersecting) {
                loadNextBatchOfRails();
            }
        }, { rootMargin: '300px' }); // Load when 300px away from viewport
        railObserver.observe(sentinel);

        // Load the initial batch
        await loadNextBatchOfRails(3);
    }

    async function boot() {
        try { document.body.style.pointerEvents = "auto"; } catch { }
        try { wireUI(); } catch (e) { console.error("UI init failed:", e); }
        var user = null;
        if (window.onAuthReady && typeof window.onAuthReady.then === "function") {
            try { user = await window.onAuthReady; } catch { }
        }
        await buildHomeRails(user);
    }

    if (document.readyState === "loading") document.addEventListener("DOMContentLoaded", boot, { once: true });
    else boot();

})();
